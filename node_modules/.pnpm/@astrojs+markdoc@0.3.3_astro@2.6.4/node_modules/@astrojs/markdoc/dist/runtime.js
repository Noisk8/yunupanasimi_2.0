import Markdoc from "@markdoc/markdoc";
import { setupHeadingConfig } from "./heading-ids.js";
import { default as default2 } from "@markdoc/markdoc";
async function setupConfig(userConfig) {
  let defaultConfig = setupHeadingConfig();
  if (userConfig.extends) {
    for (let extension of userConfig.extends) {
      if (extension instanceof Promise) {
        extension = await extension;
      }
      defaultConfig = mergeConfig(defaultConfig, extension);
    }
  }
  return mergeConfig(defaultConfig, userConfig);
}
function setupConfigSync(userConfig) {
  const defaultConfig = setupHeadingConfig();
  return mergeConfig(defaultConfig, userConfig);
}
function mergeConfig(configA, configB) {
  return {
    ...configA,
    ...configB,
    ctx: {
      ...configA.ctx,
      ...configB.ctx
    },
    tags: {
      ...configA.tags,
      ...configB.tags
    },
    nodes: {
      ...configA.nodes,
      ...configB.nodes
    },
    functions: {
      ...configA.functions,
      ...configB.functions
    },
    variables: {
      ...configA.variables,
      ...configB.variables
    }
  };
}
function getTextContent(childNodes) {
  let text = "";
  for (const node of childNodes) {
    if (typeof node === "string" || typeof node === "number") {
      text += node;
    } else if (typeof node === "object" && Markdoc.Tag.isTag(node)) {
      text += getTextContent(node.children);
    }
  }
  return text;
}
const headingLevels = [1, 2, 3, 4, 5, 6];
function collectHeadings(children) {
  let collectedHeadings = [];
  for (const node of children) {
    if (typeof node !== "object" || !Markdoc.Tag.isTag(node))
      continue;
    if (node.attributes.__collectHeading === true && typeof node.attributes.level === "number") {
      collectedHeadings.push({
        slug: node.attributes.id,
        depth: node.attributes.level,
        text: getTextContent(node.children)
      });
      continue;
    }
    for (const level of headingLevels) {
      if (node.name === "h" + level) {
        collectedHeadings.push({
          slug: node.attributes.id,
          depth: level,
          text: getTextContent(node.children)
        });
      }
    }
    collectedHeadings.concat(collectHeadings(node.children));
  }
  return collectedHeadings;
}
export {
  default2 as Markdoc,
  collectHeadings,
  getTextContent,
  setupConfig,
  setupConfigSync
};
