import matter from "gray-matter";
function parseFrontmatter(fileContents, filePath) {
  try {
    matter.clearCache();
    return matter(fileContents);
  } catch (e) {
    if (e.name === "YAMLException") {
      const err = e;
      err.id = filePath;
      err.loc = { file: e.id, line: e.mark.line + 1, column: e.mark.column };
      err.message = e.reason;
      throw err;
    } else {
      throw e;
    }
  }
}
class MarkdocError extends Error {
  constructor(props, ...params) {
    super(...params);
    this.type = "MarkdocError";
    const {
      // Use default code for unknown errors in Astro core
      // We don't have a best practice for integration error codes yet
      code = 99999,
      name,
      title = "MarkdocError",
      message,
      stack,
      location,
      hint,
      frame
    } = props;
    this.errorCode = code;
    this.title = title;
    if (message)
      this.message = message;
    this.stack = stack ? stack : this.stack;
    this.loc = location;
    this.hint = hint;
    this.frame = frame;
  }
}
function prependForwardSlash(str) {
  return str[0] === "/" ? str : "/" + str;
}
function isValidUrl(str) {
  try {
    new URL(str);
    return true;
  } catch {
    return false;
  }
}
const PROPAGATED_ASSET_FLAG = "astroPropagatedAssets";
function hasContentFlag(viteId, flag) {
  const flags = new URLSearchParams(viteId.split("?")[1] ?? "");
  return flags.has(flag);
}
export {
  MarkdocError,
  PROPAGATED_ASSET_FLAG,
  hasContentFlag,
  isValidUrl,
  parseFrontmatter,
  prependForwardSlash
};
