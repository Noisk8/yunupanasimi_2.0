import matter from 'gray-matter';
/**
 * Match YAML exception handling from Astro core errors
 * @see 'astro/src/core/errors.ts'
 */
export declare function parseFrontmatter(fileContents: string, filePath: string): matter.GrayMatterFile<string>;
/**
 * Matches AstroError object with types like error codes stubbed out
 * @see 'astro/src/core/errors/errors.ts'
 */
export declare class MarkdocError extends Error {
    errorCode: number;
    loc: ErrorLocation | undefined;
    title: string | undefined;
    hint: string | undefined;
    frame: string | undefined;
    type: string;
    constructor(props: ErrorProperties, ...params: any);
}
interface ErrorLocation {
    file?: string;
    line?: number;
    column?: number;
}
interface ErrorProperties {
    code?: number;
    title?: string;
    name?: string;
    message?: string;
    location?: ErrorLocation;
    hint?: string;
    stack?: string;
    frame?: string;
}
/**
 * @see 'astro/src/core/path.ts'
 */
export declare function prependForwardSlash(str: string): string;
export declare function isValidUrl(str: string): boolean;
/**
 * Identifies Astro components with propagated assets
 * @see 'packages/astro/src/content/consts.ts'
 */
export declare const PROPAGATED_ASSET_FLAG = "astroPropagatedAssets";
/**
 * @see 'packages/astro/src/content/utils.ts'
 */
export declare function hasContentFlag(viteId: string, flag: string): boolean;
export {};
