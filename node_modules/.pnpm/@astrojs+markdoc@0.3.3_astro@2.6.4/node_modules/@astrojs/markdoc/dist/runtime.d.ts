import type { MarkdownHeading } from '@astrojs/markdown-remark';
import { type RenderableTreeNode } from '@markdoc/markdoc';
import type { AstroMarkdocConfig } from './config.js';
/** Used to call `Markdoc.transform()` and `Markdoc.Ast` in runtime modules */
export { default as Markdoc } from '@markdoc/markdoc';
/**
 * Merge user config with default config and set up context (ex. heading ID slugger)
 * Called on each file's individual transform.
 * TODO: virtual module to merge configs per-build instead of per-file?
 */
export declare function setupConfig(userConfig: AstroMarkdocConfig): Promise<Omit<AstroMarkdocConfig, 'extends'>>;
/** Used for synchronous `getHeadings()` function */
export declare function setupConfigSync(userConfig: AstroMarkdocConfig): Omit<AstroMarkdocConfig, 'extends'>;
/**
 * Get text content as a string from a Markdoc transform AST
 */
export declare function getTextContent(childNodes: RenderableTreeNode[]): string;
/**
 * Collect headings from Markdoc transform AST
 * for `headings` result on `render()` return value
 */
export declare function collectHeadings(children: RenderableTreeNode[]): MarkdownHeading[];
